// datasource dan generator
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum untuk peran dan tipe pertanyaan
enum Role {
  STUDENT
  ADMIN
  MENTOR
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum QuizAttemptStatus {
  IN_PROGRESS
  COMPLETED
}

// --- Model-model Utama ---

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  tasks        Task[]        @relation("UserTasks")
  submissions  Submission[]  @relation("UserSubmissions")
  quizzes      Quiz[]        @relation("UserQuizzes")
  quizAttempts QuizAttempt[] @relation("UserQuizAttempts")
}

model Task {
  id                  String   @id @default(cuid())
  title               String
  description         String   @db.Text
  submissionStartDate DateTime
  deadline            DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relasi
  authorId String
  author   User   @relation("UserTasks", fields: [authorId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([authorId])
}

model Submission {
  id          String   @id @default(cuid())
  fileUrl     String?
  grade       Int?
  comment     String?  @db.Text
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi
  taskId    String
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  studentId String
  student   User   @relation("UserSubmissions", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([taskId, studentId])
  @@index([taskId])
  @@index([studentId])
}

model Quiz {
  id                  String    @id @default(cuid())
  title               String
  description         String?   @db.Text
  duration            Int?      // Durasi kuis dalam menit
  deadline            DateTime
  submissionStartDate DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relasi
  authorId String
  author   User   @relation("UserQuizzes", fields: [authorId], references: [id], onDelete: Cascade)
  questions    Question[]
  quizAttempts QuizAttempt[]

  @@index([authorId])
}

model Question {
  id       String       @id @default(cuid())
  text     String       @db.Text
  imageUrl String?      @db.Text
  options  Json         // Pilihan ganda, atau jawaban benar untuk tipe lain
  type     QuestionType // MULTIPLE_CHOICE, TRUE_FALSE, ESSAY

  // Relasi
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizAnswers QuizAnswer[]

  @@index([quizId])
}
model QuizAttempt {
  id                String            @id @default(cuid())
  score             Float
  submittedAt       DateTime          @default(now())
  status            QuizAttemptStatus @default(IN_PROGRESS)
  progress          Json?             // Menyimpan progres jawaban sementara
  timeLeftInSeconds Int?
  violationCount    Int?              @default(0)
  quizId            String
  quiz              Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  studentId         String
  student           User              @relation("UserQuizAttempts", fields: [studentId], references: [id], onDelete: Cascade)
  answers           QuizAnswer[]
  @@unique([quizId, studentId])
  @@index([quizId])
  @@index([studentId])
}

model QuizAnswer {
  id                  String  @id @default(cuid())
  isCorrect           Boolean
  selectedOptionIndex Int?    // Untuk MULTIPLE_CHOICE atau TRUE_FALSE
  answerText          String? @db.Text // Untuk ESSAY

  // Relasi
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
}
